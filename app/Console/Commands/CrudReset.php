<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class CrudReset extends Command
{
    protected $signature = 'crud:reset {--dry-run : Preview deletions without making changes}';
    protected $description = 'Reset all files generated by make:crud without affecting existing system files';

    public function handle()
    {
        $file = storage_path('crud_models.json');
        $dryRun = $this->option('dry-run');

        if (!file_exists($file)) {
            $this->info('No tracked CRUD models found to reset.');
            return 0;
        }

        $models = json_decode(file_get_contents($file), true);

        foreach ($models as $model) {
            $modelStudly = Str::studly($model);
            $modelSnake = Str::snake($model);
            $modelPluralSnake = Str::plural($modelSnake);

            // Delete model
            $this->deleteFile(app_path("Models/{$modelStudly}.php"), $dryRun);

            // Delete migration
            $migrationFiles = File::files(database_path('migrations'));
            foreach ($migrationFiles as $migration) {
                if (Str::contains($migration->getFilename(), Str::snake($modelStudly))) {
                    $this->deleteFile($migration->getPathname(), $dryRun);
                }
            }

            // Delete API controller
            $this->deleteFile(app_path("Http/Controllers/Api/{$modelStudly}Controller.php"), $dryRun);

            // Delete Web controller
            $this->deleteFile(app_path("Http/Controllers/{$modelStudly}Controller.php"), $dryRun);

            // Delete request
            $this->deleteFile(app_path("Http/Requests/{$modelStudly}Request.php"), $dryRun);

            // Delete views
            $viewPath = resource_path("views/{$modelPluralSnake}");
            if (File::exists($viewPath)) {
                if ($dryRun) {
                    $this->info("Would delete views directory: {$viewPath}");
                } else {
                    File::deleteDirectory($viewPath);
                    $this->info("Deleted views directory: {$viewPath}");
                }
            }

            // Clean routes
            $this->cleanRoutes(base_path('routes/web.php'), $modelStudly, $dryRun);
            $this->cleanRoutes(base_path('routes/api.php'), $modelStudly, $dryRun);
        }

        if (!$dryRun) {
            unlink($file);
            $this->info('All tracked CRUD-generated resources have been reset.');
        } else {
            $this->info('Dry run complete. No files were deleted.');
        }

        return 0;
    }

    private function deleteFile($path, $dryRun = false)
    {
        if (File::exists($path)) {
            if ($dryRun) {
                $this->info("Would delete: {$path}");
            } else {
                File::delete($path);
                $this->info("Deleted: {$path}");
            }
        }
    }

    private function cleanRoutes(string $routeFilePath, string $modelStudly, bool $dryRun = false)
    {
        if (!File::exists($routeFilePath)) return;

        $lines = file($routeFilePath);
        $filtered = [];
        $modified = false;

        // Detect controller names based on model name
        $webController = "{$modelStudly}Controller";
        $apiController = "Api\\{$modelStudly}Controller";

        foreach ($lines as $line) {
            $trimmed = trim($line);

            // Remove use statements for the specific controller
            $isUseForWeb = Str::contains($trimmed, "use App\\Http\\Controllers\\{$webController};");
            $isUseForApi = Str::contains($trimmed, "use App\\Http\\Controllers\\Api\\") &&
                Str::contains($trimmed, "{$modelStudly}Controller");

            // Remove route lines referencing those controllers
            $isRouteLine = Str::contains($trimmed, 'Route::');
            $referencesModel = Str::contains($trimmed, strtolower($modelStudly)) ||
                Str::contains($trimmed, "{$modelStudly}Controller");

            if ($isUseForWeb || $isUseForApi || ($isRouteLine && $referencesModel)) {
                if ($this->confirm("Delete route entry from " . basename($routeFilePath) . "? \nâ†’ " . $trimmed, !$dryRun)) {
                    if ($dryRun) {
                        $this->info("Would remove line: " . $trimmed);
                    } else {
                        $this->info("Removed line: " . $trimmed);
                    }
                    $modified = true;
                    continue;
                }
            }

            $filtered[] = $line;
        }

        if ($modified && !$dryRun) {
            file_put_contents($routeFilePath, implode('', $filtered));
        }
    }

}
